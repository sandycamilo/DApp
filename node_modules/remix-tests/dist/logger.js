"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var colors_1 = __importDefault(require("colors"));
var winston_1 = __importDefault(require("winston"));
var time_stamp_1 = __importDefault(require("time-stamp"));
var color_support_1 = __importDefault(require("color-support"));
function hasFlag(flag) {
    return ((typeof (process) !== 'undefined') && (process.argv.indexOf('--' + flag) !== -1));
}
function addColor(str) {
    if (hasFlag('no-color')) {
        return str;
    }
    if (hasFlag('color')) {
        return colors_1.default.gray(str);
    }
    if (color_support_1.default()) {
        return colors_1.default.gray(str);
    }
    return str;
}
function getTimestamp() {
    return '[' + addColor(time_stamp_1.default('HH:mm:ss')) + ']';
}
// create winston logger format
var logFmt = winston_1.default.format.printf(function (info) {
    return getTimestamp() + " " + info.level + ": " + info.message;
});
var Log = /** @class */ (function () {
    function Log() {
        this.logger = winston_1.default.createLogger({
            level: 'error',
            transports: [new winston_1.default.transports.Console()],
            format: winston_1.default.format.combine(winston_1.default.format.colorize({ all: true }), logFmt)
        });
    }
    Log.prototype.setVerbosity = function (v) {
        this.logger.configure({
            level: v,
            transports: [new winston_1.default.transports.Console()],
            format: winston_1.default.format.combine(winston_1.default.format.colorize({ all: true }), logFmt)
        });
    };
    return Log;
}());
module.exports = Log;
//# sourceMappingURL=logger.js.map