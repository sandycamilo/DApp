"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var web3_1 = __importDefault(require("web3"));
var runTestFiles_1 = require("./runTestFiles");
var fileSystem_1 = __importDefault(require("./fileSystem"));
var remix_simulator_1 = require("remix-simulator");
var logger_1 = __importDefault(require("./logger"));
var logger = new logger_1.default();
var log = logger.logger;
var colors_1 = __importDefault(require("colors"));
// parse verbosity
function mapVerbosity(v) {
    var levels = {
        0: 'error',
        1: 'warn',
        2: 'info',
        3: 'verbose',
        4: 'debug',
        5: 'silly'
    };
    return levels[v];
}
var version = require('../package.json').version;
commander_1.default.version(version);
commander_1.default.command('version').description('output the version number').action(function () {
    console.log(version);
});
commander_1.default.command('help').description('output usage information').action(function () {
    commander_1.default.help();
});
// get current version
commander_1.default
    .option('-v, --verbose <level>', 'run with verbosity', mapVerbosity)
    .action(function (filename) { return __awaiter(void 0, void 0, void 0, function () {
    var web3, provider, isDirectory;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!filename.endsWith('_test.sol')) {
                    log.error('Test filename should end with "_test.sol"');
                    process.exit();
                }
                // Console message
                console.log(colors_1.default.white('\n\tüëÅ\t:: Running remix-tests - Unit testing for solidity ::\tüëÅ\n'));
                // set logger verbosity
                if (commander_1.default.verbose) {
                    logger.setVerbosity(commander_1.default.verbose);
                    log.info('verbosity level set to ' + commander_1.default.verbose.blue);
                }
                web3 = new web3_1.default();
                provider = new remix_simulator_1.Provider();
                return [4 /*yield*/, provider.init()];
            case 1:
                _a.sent();
                web3.setProvider(provider);
                if (!fileSystem_1.default.existsSync(filename)) {
                    console.error(filename + ' not found');
                    process.exit(1);
                }
                isDirectory = fileSystem_1.default.lstatSync(filename).isDirectory();
                runTestFiles_1.runTestFiles(filename, isDirectory, web3);
                return [2 /*return*/];
        }
    });
}); });
if (!process.argv.slice(2).length) {
    log.error('Please specify a filename');
    process.exit();
}
commander_1.default.parse(process.argv);
//# sourceMappingURL=run.js.map