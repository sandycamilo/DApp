"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTestSources = void 0;
var async_1 = __importDefault(require("async"));
require('colors');
var compiler_1 = require("./compiler");
var deployer_1 = require("./deployer");
var testRunner_1 = require("./testRunner");
var web3_1 = __importDefault(require("web3"));
var remix_simulator_1 = require("remix-simulator");
var createWeb3Provider = function () {
    return __awaiter(this, void 0, void 0, function () {
        var web3, provider;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    web3 = new web3_1.default();
                    provider = new remix_simulator_1.Provider();
                    return [4 /*yield*/, provider.init()];
                case 1:
                    _a.sent();
                    web3.setProvider(provider);
                    return [2 /*return*/, web3];
            }
        });
    });
};
/**
 * @dev Run tests from source of a test contract file (used for IDE)
 * @param contractSources Sources of contract
 * @param compilerConfig current compiler configuration
 * @param testCallback Test callback
 * @param resultCallback Result Callback
 * @param finalCallback Final Callback
 * @param importFileCb Import file callback
 * @param opts Options
 */
function runTestSources(contractSources, compilerConfig, testCallback, resultCallback, finalCallback, importFileCb, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var sourceASTs, web3, _a, accounts;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    opts = opts || {};
                    sourceASTs = {};
                    _a = opts.web3;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, createWeb3Provider()];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    web3 = _a;
                    accounts = opts.accounts || null;
                    async_1.default.waterfall([
                        function getAccountList(next) {
                            if (accounts)
                                return next();
                            web3.eth.getAccounts(function (_err, _accounts) {
                                accounts = _accounts;
                                next();
                            });
                        },
                        function compile(next) {
                            compiler_1.compileContractSources(contractSources, compilerConfig, importFileCb, { accounts: accounts }, next);
                        },
                        function deployAllContracts(compilationResult, asts, next) {
                            for (var filename in asts) {
                                if (filename.endsWith('_test.sol'))
                                    sourceASTs[filename] = asts[filename].ast;
                            }
                            deployer_1.deployAll(compilationResult, web3, false, function (err, contracts) {
                                if (err) {
                                    // If contract deployment fails because of 'Out of Gas' error, try again with double gas
                                    // This is temporary, should be removed when remix-tests will have a dedicated UI to 
                                    // accept deployment params from UI
                                    if (err.message.includes('The contract code couldn\'t be stored, please check your gas limit')) {
                                        deployer_1.deployAll(compilationResult, web3, true, function (error, contracts) {
                                            if (error)
                                                next([{ message: 'contract deployment failed after trying twice: ' + error.message, severity: 'error' }]); // IDE expects errors in array
                                            else
                                                next(null, compilationResult, contracts);
                                        });
                                    }
                                    else
                                        next([{ message: 'contract deployment failed: ' + err.message, severity: 'error' }]); // IDE expects errors in array
                                }
                                else
                                    next(null, compilationResult, contracts);
                            });
                        },
                        function determineTestContractsToRun(compilationResult, contracts, next) {
                            var contractsToTest = [];
                            var contractsToTestDetails = [];
                            var _loop_1 = function (filename) {
                                if (!filename.endsWith('_test.sol')) {
                                    return "continue";
                                }
                                Object.keys(compilationResult[filename]).forEach(function (contractName) {
                                    contractsToTestDetails.push(compilationResult[filename][contractName]);
                                    contractsToTest.push(contractName);
                                });
                            };
                            for (var filename in compilationResult) {
                                _loop_1(filename);
                            }
                            next(null, contractsToTest, contractsToTestDetails, contracts);
                        },
                        function runTests(contractsToTest, contractsToTestDetails, contracts, next) {
                            var totalPassing = 0;
                            var totalFailing = 0;
                            var totalTime = 0;
                            var errors = [];
                            var _testCallback = function (err, result) {
                                if (result.type === 'testFailure') {
                                    errors.push(result);
                                }
                                testCallback(result);
                            };
                            var _resultsCallback = function (_err, result, cb) {
                                resultCallback(_err, result, function () { });
                                totalPassing += result.passingNum;
                                totalFailing += result.failureNum;
                                totalTime += result.timePassed;
                                cb();
                            };
                            async_1.default.eachOfLimit(contractsToTest, 1, function (contractName, index, cb) {
                                var fileAST = sourceASTs[contracts[contractName]['filename']];
                                testRunner_1.runTest(contractName, contracts[contractName], contractsToTestDetails[index], fileAST, { accounts: accounts }, _testCallback, function (err, result) {
                                    if (err) {
                                        return cb(err);
                                    }
                                    _resultsCallback(null, result, cb);
                                });
                            }, function (err) {
                                if (err) {
                                    return next(err);
                                }
                                var finalResults = {
                                    totalPassing: 0,
                                    totalFailing: 0,
                                    totalTime: 0,
                                    errors: [],
                                };
                                finalResults.totalPassing = totalPassing || 0;
                                finalResults.totalFailing = totalFailing || 0;
                                finalResults.totalTime = totalTime || 0;
                                finalResults.errors = [];
                                errors.forEach(function (error, _index) {
                                    finalResults.errors.push({ context: error.context, value: error.value, message: error.errMsg });
                                });
                                next(null, finalResults);
                            });
                        }
                    ], finalCallback);
                    return [2 /*return*/];
            }
        });
    });
}
exports.runTestSources = runTestSources;
//# sourceMappingURL=runTestSources.js.map